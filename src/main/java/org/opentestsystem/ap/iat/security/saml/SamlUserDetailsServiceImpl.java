/*
 * Copyright 2017 Regents of the University of California.
 *
 * Licensed under the Educational Community License, Version 2.0 (the "license");
 * you may not use this file except in compliance with the License. You may
 * obtain a copy of the license at
 *
 * https://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.opentestsystem.ap.iat.security.saml;

import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import com.google.common.base.Splitter;
import org.opentestsystem.ap.common.security.model.Tenancy;
import org.opentestsystem.ap.common.security.model.User;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.AuthorityUtils;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.saml.SAMLCredential;
import org.springframework.security.saml.userdetails.SAMLUserDetailsService;
import org.springframework.stereotype.Service;

@Service
public class SamlUserDetailsServiceImpl implements SAMLUserDetailsService {

    private static final String PROP_TENANCY_CHAIN = "sbacTenancyChain";

    private static final String PROP_UUID = "sbacUUID";

    @Override
	public Object loadUserBySAML(SAMLCredential credential) throws UsernameNotFoundException {

		final List<Tenancy> tenancyChain = Stream.of(credential.getAttributeAsStringArray(PROP_TENANCY_CHAIN))
			.map(rawTenancy -> {
				final List<String> values = Splitter.on("|").trimResults().splitToList(rawTenancy);
				return Tenancy.builder()
					.roleId(values.get(1))
					.name(values.get(2))
					.level(values.get(3))
					.clientId(values.get(4))
					.client(values.get(5))
					.groupOfStatesId(values.get(6))
					.groupOfStates(values.get(7))
					.stateId(values.get(8))
					.state(values.get(9))
					.groupOfDistrictsId(values.get(10))
					.groupOfDistricts(values.get(11))
					.districtId(values.get(12))
					.district(values.get(13))
					.groupOfInstitutionsId(values.get(14))
					.groupOfInstitutions(values.get(15))
					.institutionId(values.get(16))
					.institution(values.get(17))
					.build();
			})
			.collect(Collectors.toList());

		/* TODO: map roles from SAMLCredential */
        final Collection<GrantedAuthority> grantedAuthorities = AuthorityUtils.createAuthorityList("ROLE_ADMIN", "ROLE_USER");

        final String username = credential.getNameID().getValue();

        final User user = User.builder()
            .id(credential.getAttributeAsString(PROP_UUID))
            .email(credential.getAttributeAsString("mail"))
            .firstName(credential.getAttributeAsString("givenName"))
            .fullName(credential.getAttributeAsString("cn"))
            .lastName(credential.getAttributeAsString("sn"))
            .tenancyChain(tenancyChain)
            .username(username)
            .password("[PROTECTED]")
            .enabled(true)
            .credentialsNonExpired(true)
            .accountNonExpired(true)
            .accountNonLocked(true)
            .authorities(grantedAuthorities)
            .build();

        return user;
	}

}
